apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'me.tatarka.retrolambda'

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0-M2'
        classpath 'me.tatarka:gradle-retrolambda:3.3.1'
    }
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        applicationId "com.guddy.android_testing_box"
        minSdkVersion 23
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        String sharedTestDir = 'src/sharedTest/java'
        test {
            java.srcDir sharedTestDir
        }
        androidTest {
            java.srcDir sharedTestDir
        }

        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
}

configurations {
    jgivenReport
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile 'com.android.support:multidex:1.0.1'

    compile 'com.android.support:appcompat-v7:25.0.0'
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.5'

    testCompile 'junit:junit:4.12'
    testCompile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testCompile 'org.jetbrains.spek:spek-api:1.0.89'
    testCompile 'org.jetbrains.spek:spek-junit-platform-engine:1.0.89'
    testCompile 'org.junit.platform:junit-platform-runner:1.0.0-M3'
    testCompile 'org.amshove.kluent:kluent:1.8'
    testCompile 'com.google.truth:truth:0.32'
    testCompile 'com.greghaskins:spectrum:0.7.1'
    testCompile 'com.github.ignaciotcrespo:frutilla:0.7.1'
    testCompile 'de.bechte.junit:junit-hierarchicalcontextrunner:4.12.1'
    testCompile 'com.tngtech.jgiven:jgiven-junit:0.14.1'
    testCompile 'com.tngtech.jgiven:jgiven-html5-report:0.14.1'
    testCompile 'org.robolectric:robolectric:3.2.2'
    testCompile 'org.robolectric:shadows-multidex:3.2.2'
    testCompile 'org.robolectric:shadows-support-v4:3.2.2'
    testCompile 'org.khronos:opengl-api:gl1.1-android-2.1_r1'

    androidTestCompile 'com.tngtech.jgiven:jgiven-android:0.14.1'

    jgivenReport 'com.tngtech.jgiven:jgiven-html5-report:0.14.1'
    jgivenReport 'org.slf4j:slf4j-simple:1.7.24'

    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestCompile('org.jetbrains.spek:spek-api:1.0.89') {
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-runtime'
    }
    androidTestCompile('org.jetbrains.spek:spek-junit-platform-engine:1.0.89') {
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-runtime'
    }
    androidTestCompile('com.android.support.test:runner:0.5') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile 'com.jayway.android.robotium:robotium-solo:5.6.3'
    androidTestCompile('com.android.support.test:rules:0.5') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile 'com.google.truth:truth:0.32'
    androidTestCompile 'de.bechte.junit:junit-hierarchicalcontextrunner:4.12.1'
}

// jgiven for unit testing

task jgivenReport(type: JavaExec, dependsOn: 'test') {
    main = 'com.tngtech.jgiven.report.ReportGenerator'
    args '--sourceDir=jgiven-reports',
            '--targetDir=jgiven-reports/html',
            '--format=html'
    classpath = configurations.testCompile
}

// jgiven for UI testing

def targetDir = 'build/reports/jgiven/json'
def adb = android.getAdbExe().toString()
def reportsDir = '/storage/emulated/0/Download/jgiven-reports'

task cleanJGivenReports(type: Delete) {
    delete targetDir
}

task pullJGivenReports(type: Exec, dependsOn: cleanJGivenReports) {
    doFirst {
        if (!file(targetDir).mkdirs()) {
            println("Cannot create dir "+targetDir)
        }
    }

    commandLine adb, 'pull', reportsDir, targetDir

    doLast {
        println("Pulled "+reportsDir+" to "+targetDir);
    }
}

task cleanJGivenReportsFromDevice(type: Exec) {
    commandLine adb, 'shell', 'rm -rf', reportsDir

    doLast {
        println("Deleted "+reportsDir)
    }
}

pullJGivenReports.finalizedBy(cleanJGivenReportsFromDevice)

task cleanJGivenHtmlReport(type: Delete) {
    delete 'build/reports/jgiven/html'
}

task jgivenHtml5Report(type: JavaExec, dependsOn: cleanJGivenHtmlReport) {
    main = 'com.tngtech.jgiven.report.ReportGenerator'
    args '--sourceDir=build/reports/jgiven/json',
            '--targetDir=build/reports/jgiven/html',
            '--format=html5',
            '--exclude-empty-scenarios=true'
    classpath = configurations.jgivenReport
}

pullJGivenReports.finalizedBy(jgivenHtml5Report)

tasks.whenTaskAdded { task ->
    if (task.name == 'connectedAndroidTest') {
        task.finalizedBy 'pullJGivenReports'
    }
}
